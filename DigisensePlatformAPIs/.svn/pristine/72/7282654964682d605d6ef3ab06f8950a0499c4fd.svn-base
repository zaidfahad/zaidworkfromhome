using DigisensePlatformAPIs.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;

namespace DigisensePlatformAPIs.BLUtilities
{
    public class Report_BL
    {

        #region Report Summary 8.02
        public static List<ReportSummaryMTBDResponse> ReportSummaryPlatformMTBD(DataTable dt)
        {
            List<ReportSummaryMTBDResponse> reportsummaryMTBD = new List<ReportSummaryMTBDResponse>();
            return reportsummaryMTBD;
        }
        #endregion

        #region Report Summary 8.03
        public static List<ReportSummaryForSpecificVehicle> ReportSummaryForSpecificVehicle(DataTable dt)
        {
            List<ReportSummaryForSpecificVehicle> reportsummaryMTBD = new List<ReportSummaryForSpecificVehicle>();
            return reportsummaryMTBD;
        }
        #endregion

        #region    Vehicle Status Response 8.06
        public static List<VehicleStatusResponse> VehicleStatusResponse(DataTable dt)
        {
            List<VehicleStatusResponse> list = new List<VehicleStatusResponse>();
            list.Clear();
            try
            {
                VehicleStatusResponse clsVehicleResponse = new VehicleStatusResponse();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    
                    if (Convert.ToInt32(dt.Rows[i]["status"]) == 0)
                    {
                        clsVehicleResponse.unknown = Convert.ToInt32(dt.Rows[i]["statuscount"]);
                    }
                    else if (Convert.ToInt32(dt.Rows[i]["status"]) == 1)
                    {
                        clsVehicleResponse.running = Convert.ToInt32(dt.Rows[i]["statuscount"]);
                    }
                    else if (Convert.ToInt32(dt.Rows[i]["status"]) == 2)
                    {
                        clsVehicleResponse.stopped = Convert.ToInt32(dt.Rows[i]["statuscount"]);
                    }
                    else if (Convert.ToInt32(dt.Rows[i]["status"]) == 3)
                    {
                        clsVehicleResponse.idle = Convert.ToInt32(dt.Rows[i]["statuscount"]);
                    }
                    else if (Convert.ToInt32(dt.Rows[i]["status"]) == 5)
                    {
                        clsVehicleResponse.notused = Convert.ToInt32(dt.Rows[i]["statuscount"]);
                    }
                    
                 
                }
                list.Add(clsVehicleResponse);
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }
        #endregion

        #region    Vehicle Health Status Response 8.05
        public static List<VehicleHealthStatusResponse> VehicleHealthStatusResponse(DataSet dt)
        {
            List<VehicleHealthStatusResponse> list = new List<VehicleHealthStatusResponse>();
            list.Clear();
            try
            {
                VehicleHealthStatusResponse clsVehicleHealthStatusResponse = new VehicleHealthStatusResponse();
       

                vehiclehealth clsvehiclehealth = new vehiclehealth();

                for (int i = 0; i < dt.Tables[0].Rows.Count; i++)
                {

                    if ( dt.Tables[0].Rows[i]["vehiclehealth"].ToString() == "Good")
                    {
                        clsvehiclehealth.good = Convert.ToInt32(dt.Tables[0].Rows[i]["COUNT"]);
                    }
                    else if (dt.Tables[0].Rows[i]["vehiclehealth"].ToString() == "Bad")
                    {
                        clsvehiclehealth.bad = Convert.ToInt32(dt.Tables[0].Rows[i]["COUNT"]);
                    }
                    else if (dt.Tables[0].Rows[i]["vehiclehealth"].ToString() == "Warning")
                    {
                        clsvehiclehealth.warning = Convert.ToInt32(dt.Tables[0].Rows[i]["COUNT"]);
                    }
      
                }
                clsVehicleHealthStatusResponse.vehiclehealth = clsvehiclehealth;
                clsVehicleHealthStatusResponse.totalBreakdownsOccurred = Convert.ToInt32(dt.Tables[1].Rows[0][0].ToString() == "" ? 0 : Convert.ToInt32(dt.Tables[1].Rows[0][0].ToString()));
                clsVehicleHealthStatusResponse.totalBreakdownsClosed = Convert.ToInt32(dt.Tables[2].Rows[0][0].ToString() == "" ? 0 : Convert.ToInt32(dt.Tables[2].Rows[0][0].ToString()));
                
                list.Add(clsVehicleHealthStatusResponse);
                return list;
            }
            catch (Exception ex)
            {
                return list;
            }
        }
        #endregion

        #region Other Reports From Swagger

        #region /reportsummary/platform/mtbd/vehiclemovement/speeddata/{vehicleRegNo}
        public static List<VehicleMovementSpeeddata> PlatformVehilceMovementSpeedResponse(DataTable dt)
        {
            return null;
        }
        #endregion

        #region /reportsummary/platform/mtbd/vehiclemovement/usagetime/{vehicleRegNo}
        public static VehicleMovementUsageTime VehilceMovementUsageTime(DataTable dt)
        {
            return null;
        }
        #endregion

        #region GET /reportsummary/platform/mtbd/vehiclemovement/enginerpm/{vehicleRegNo}
        public static VehicleMovementUsageTime VehilceMovementEngineRpm(DataTable dt)
        {
            return null;
        }

        #endregion

        #region GET /reportsummary/platform/mtbd/vehiclemovement/vehiclemovementsummary/{vehicleRegNo}
        public static List<ReportSummaryCommonReponse> VehilceMovementSummary(DataTable dt)
        {
            List<ReportSummaryCommonReponse> vehicleSummary =  new List<ReportSummaryCommonReponse>();

            return vehicleSummary;
        }

        #endregion

        #region /reportsummary/platform/mtbd/vehiclemovement/vehiclemovementreport/{vehicleRegNo}
        public static VehilceMovementReport VehicleMovementReport(DataTable dt)
        {
            return null;
        }
        #endregion

        #region  /reportsummary/platform/mtbd/alerts/vehiclealerts/{vehicleRegNo}
        public static List<ReportSumamryVehicleAlerts> VehicleAlerts(DataTable dt)
        {

            return null;
        }
        #endregion

        #region GET /reportsummary/platform/mtbd/alerts/violation/{vehicleRegNo}
        public static AlertsViolation AlertsViolation(DataTable dt)
        {
            return null;
        }
        #endregion

        #region /reportsummary/platform/mtbd/alerts/alertssummary/{vehicleRegNo}

        public static List<ReportSummaryCommonReponse> AlertsSummaryResponse(DataTable dt)
        {
            return null;
        }
        #endregion

        #region GET /reportsummary/platform/mtbd/delivery/vehicleusage/{vehicleRegNo}
        public static List<ReportSummaryCommonResponse> VehicleUsage(DataTable dt)
        {
            return null;
        }
        #endregion

        #region GET /reportsummary/platform/mtbd/delivery/vehicleusagesummary/{vehicleRegNo}
        public static List<ReportSummaryCommonReponse> VehicleReportSummary(DataTable dt)
        {
            return null;
        }
        #endregion

        #region GET /reportsummary/platform/mtbd/vehiclehealth/vehiclehealthsummary/{vehicleRegNo}
        public static List<ReportSummaryCommonReponse> VehicleHealthSummary(DataTable dt)
        {
            return null;
        }
        #endregion

        #region GET /reportsummary/platform/mtbd/driver/distancecovered
        public static List<ReportSummaryDistanceCovered> DistanceCovered(DataTable dt)
        {
            return null;
        }
        #endregion

        #region GET /report/delivery/{vehicleRegNo}/{delivery}
        public static List<VehicleSummary> ReportSummaryDeliveryVehicle(DataTable dt)
        {
            return null;
        }

        #endregion

        #region  /report/vehiclehealth/{vehicleRegNo}/{vehiclehealth}
        public static List<VehicleSummary> VehicleHealth(DataTable dt)
        {
            return null;
        }

        #endregion

        #region /report/alerts/{vehicleRegNo}/{alerts}
        public static List<VehicleSummary> ReportAlerts(DataTable dt)
        {
            return null;
        }
        #endregion


        #endregion
    }
}