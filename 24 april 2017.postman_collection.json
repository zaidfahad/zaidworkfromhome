{
	"id": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
	"name": "24 april 2017",
	"description": "Testing With New Connection String !",
	"order": [
		"731be266-30ca-104b-f2a2-444b87cae9b5",
		"3c798983-319c-6aaa-9c97-3caabb06c3d3",
		"170bfa93-08d6-a168-6e23-24e279161325",
		"aefbaf9b-a1df-00ad-0071-7dcbf33691f9",
		"3b8f1912-ffff-19a2-3300-c5b786fab725",
		"1fe4810d-2377-d0ac-08fa-d635d8bfcd7d",
		"f330d872-c75f-c0db-67c7-6d6091090451",
		"fda0b453-45c9-914c-24bf-f9712aec8218",
		"d6394e8a-c9c7-7f07-b299-72483126a0a9",
		"0e21ce43-bb77-8957-3741-c72f4492e107",
		"1e48ad9e-ad2d-6425-e572-4a8e2f180af0",
		"575791d3-549e-e6f3-1239-c1e36910138b",
		"fc1670cc-839e-00a9-d855-1b5e82528cc5",
		"cba0a91a-94d0-de71-9fa2-3c81544acfba",
		"d158a3e1-0509-076f-1128-a8fa8d2df5b0",
		"3f5f0b94-c4fc-1cf8-dbc3-040c521a00ee",
		"6530908e-04fc-b916-3724-e6687714d140",
		"5fd09dde-5013-c1ff-f925-7aa1cb31a1d9",
		"587bfa18-1bcc-9b8e-fab8-a444b7a727c4",
		"31ba8421-a781-1e78-5ecb-26e1a887c663",
		"bf5877f8-730d-31e7-958c-8fcaa1d81e5a",
		"e959371a-e231-443e-c88c-9de8c352397f",
		"75ac3ff6-c764-471c-d8f2-b89037ef0a67",
		"532e467f-8744-9f5d-3196-12965b92126a",
		"4432950d-e00e-3966-9e00-a2a475d6e940",
		"7e83d9ec-fa7d-7b7c-ded6-cc9888bd7a96",
		"5bec74b0-3240-ea37-ac3a-99fe8a52f28e",
		"6ddedd39-5000-b3ba-aead-8b90b0940c45",
		"faeb24db-53c6-3d68-6eba-b711a833e48a",
		"4f4f89a3-c7c1-15ea-f442-1cf9dbd48472",
		"7dce3bc1-ae40-608f-139e-6613f5329330",
		"3e396e22-3b1a-b6e7-71e1-0ab201da41c6",
		"dc3b7106-0e20-2a07-1e0d-7d0396aa6bb5",
		"f6be00d5-1b37-6cbf-7e84-1ad6cb4160fd",
		"a2c75605-bc8b-9265-9268-f4a872d8ce90",
		"8c86a2a7-36f2-7b7a-0195-f00e794a3e49",
		"2ba845b4-90c5-4626-14b4-fed99dcbcdf9",
		"0929d68d-d3c1-8164-d362-778d0d6473ab",
		"3b67ad20-d931-f6aa-bf5b-c4692edfa88f",
		"2326d868-2da8-017d-55bc-809e398ee3c8",
		"71f38d1c-6028-81ab-7182-af65c13e51a8",
		"ff391c73-8ad2-3995-e0c5-398f262ba58d",
		"7335037a-6ea7-193e-9286-6cc44cefd62a",
		"32e88745-f6a3-c5a4-c62e-2136a007ed06",
		"ad5deb5b-3d9f-838c-f0e8-b94c54417e48",
		"a84779af-99a6-3abe-f01b-c505d52448d8",
		"1b98e6f9-4927-15a6-6112-4f8917059607",
		"cdcacc35-7a0a-7604-bedd-019ee93e9f59",
		"68dd7843-1b11-766f-574d-d54352ddd384"
	],
	"folders": [],
	"timestamp": 1493017620219,
	"owner": "1623387",
	"public": false,
	"requests": [
		{
			"id": "0929d68d-d3c1-8164-d362-778d0d6473ab",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\nContent-Type: application/json\n",
			"url": "http://localhost:49963/api/geofence/point11/vehicles",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493304021273,
			"name": "/report/platform/mtbd/alerts/vehiclealerts/",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": [],
			"rawModeData": "[\r\n  {\r\n     \"vehicleRegNo\": \"MH 30 NL 7384\",\r\n    \"startDate\": \"2017-02-02\",\r\n    \"endDate\": \"2017-03-02\",\r\n    \"type\": \"In bound\"\r\n  }\r\n]"
		},
		{
			"id": "0e21ce43-bb77-8957-3741-c72f4492e107",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/liveVehicleInformation/AP 09 KU 9999",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "liveVehichle Information",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493025627068,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar vehicleInfoObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['vehiclePlatform','vehicleModel','vehicleVariant','vehicleRegNo','vehicleStatus', 'vehicleLastUsed','highEngineTemperature','engineRPM','fuelLevel','vehicleHealth','fuelEfficiencyA','fuelEfficiencyB','averageVehicleSpeed','engineOilPressure','driverName'],\n  properties: {\n    vehiclePlatform: {\n      type: 'string'\n    },\n    vehicleModel: {\n      type: 'string'\n    },\n    vehicleVariant: {\n        type: 'string'\n    },\n    vehicleRegNo:{\n        type:'string'\n    },\n   vehicleStatus:{\n       type: 'string'\n   },\n   vehicleLastUsed:{\n       type: 'string'\n   },\n   highEngineTemperature:{\n       type: 'string'\n   },\n   engineRPM:{\n       type: 'number'\n   },\n   fuelLevel:{\n       type: 'string'\n   },\n   vehicleHealth:{\n       type: 'string'\n   },\n   fuelEfficiencyA:{\n       type: 'string'\n   },\n   fuelEfficiencyB:{\n       type: 'string'\n   },\n   averageVehicleSpeed:{\n       type: 'string'\n   },\n   engineOilPressure:{\n       type: 'string'\n   },\n   driverName:{\n       type: 'string'\n   }\n  }\n   \n};\n\n\n\n\ndescribe('Get Live Vehichle Info', function() {\n    it('Should Return Live Vehichle Info', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid Live Vehichle Info List ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var alertResponse = response.body[i];\n          alertResponse.should.be.an('object');\n        alertResponse.should.have.property('vehiclePlatform').and.not.empty;\n        alertResponse.should.have.property('vehicleModel').and.not.empty;\n        alertResponse.should.have.property('vehicleVariant').and.not.empty;\n        alertResponse.should.have.property('vehicleRegNo').and.not.empty;\n        alertResponse.should.have.property('vehicleStatus');\n        alertResponse.should.have.property('vehicleLastUsed').and.not.empty;\n        alertResponse.should.have.property('highEngineTemperature').and.not.empty;\n       expect(alertResponse.should.have.property('engineRPM')).and.not.empty;\n        alertResponse.should.have.property('fuelLevel').and.not.empty;\n        alertResponse.should.have.property('vehicleHealth').and.not.empty;\n        alertResponse.should.have.property('fuelEfficiencyA').and.not.empty;\n        alertResponse.should.have.property('fuelEfficiencyB').and.not.empty;\n        alertResponse.should.have.property('averageVehicleSpeed').and.not.empty;\n        alertResponse.should.have.property('engineOilPressure').and.not.empty;\n        alertResponse.should.have.property('driverName');\n        \n        \n        \n        validvehichleList = tv4.validate(alertResponse, vehicleInfoObj);\n          tests[\"valid Live Vehichle Info List\"] = validvehichleList;\n          \n          \n      }\n     \n    });\n    \n    \n\n});\n      \n      \n    ",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "170bfa93-08d6-a168-6e23-24e279161325",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/vehicles/AP 09 KU 9999/dealers",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar dealersNameObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['dealerId', 'name','address','contactNumber','location'],\n  properties: {\n    dealerId: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    address: {\n        type: 'string'\n    },\n   contactNumber:{\n       type: 'number'\n   }, \n   location:{\n       type:'object'\n   },\n  \n   \n  }\n};\nvar locationObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['longitude', 'latitude'],\n properties: {\n    longitude: {\n    // should be number in feature\n      type: 'number'\n    },\n    latitude:{\n        // should be number in feature\n        type: 'number'\n    }\n }\n};\n\n\ndescribe('Get Dealers Info', function() {\n    it('Should Return Dealers Info Data', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid Dealers InfoList ', function() {\n      var alertResponse = response.body[0];\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('dealerId').and.not.empty;\n      alertResponse.should.have.property('name').and.not.empty;\n      alertResponse.should.have.property('address').and.not.empty;\n      alertResponse.should.have.property('contactNumber').and.not.empty;\n       alertResponse.should.have.property('location').and.not.empty;\n      for(var j=0;j<response.body.length;j++){\n          var vehichleList = response.body[j];\n          vehichleList.should.be.an('object').and.not.empty;\n           validList = tv4.validate(vehichleList, dealersNameObj);\n          tests[\"Valid Dealers Name List\"] = validList;\n          var validLocationInfo = tv4.validate(alertResponse.location, locationObj);\n             tests[\"Valid Dealers Location Info\"] = validLocationInfo;\n          \n      }\n    });\n    \n    \n\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493283043446,
			"name": "Dealersname",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "1b98e6f9-4927-15a6-6112-4f8917059607",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api/report/platform/mtbd/delivery/vehicleusagesummary//TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "api/report/platform/mtbd/alerts/alertssummary/",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493290259607,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "1e48ad9e-ad2d-6425-e572-4a8e2f180af0",
			"headers": "token: {{token}}\n",
			"url": "http://localhost:49963/api/breakDown/AP 09 KU 9999",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "PUT",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Breakdownassist",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493026219720,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\n\ndescribe('Get Breakdown assist Info', function() {\n    it('Should Return Breakdown assist Info', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n it('Should Have a Valid Breakdown assist Info', function() {\n      var breakdownResponse = response.body;\n      breakdownResponse.should.be.an('object');\n      breakdownResponse.should.have.property('longitude').and.not.empty;\n      breakdownResponse.should.have.property('latitude').and.not.empty;\n       breakdownResponse.should.have.property('timestamp').and.not.empty;\n });\n\n});\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n  \"longitude\":79.23416 ,\n  \"latitude\": 12.94271,\n  \"timestamp\":\"2016-09-06 21:41:27\"\n}"
		},
		{
			"id": "1fe4810d-2377-d0ac-08fa-d635d8bfcd7d",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963//api/listVehicles/mtbd",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "listVehicles/mtbd",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493024603386,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar vehicleInfoObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['vehiclePlatform', 'vehicleModel','vehicleVariant','vehicleRegNo','status','lastupdated','priorityAlertStatus','address','speed','runningHours','driverName','lastknownlocation'],\n  properties: {\n    vehiclePlatform: {\n      type: 'string'\n    },\n    vehicleModel: {\n      type: 'string'\n    },\n    vehicleVariant: {\n        type: 'string'\n    },\n    vehicleRegNo:{\n        type:'string'\n    },\n   status:{\n       type: 'string'\n   }, \n    lastupdated:{\n       type: 'string'\n   },\n    priorityAlertStatus:{\n       type: 'boolean'\n   },\n    address:{\n       type: 'string'\n   },\n    speed:{\n       type: 'string'\n   },\n    runningHours:{\n       type: 'string'\n   },\n    driverName:{\n       type: 'string'\n   },\n   lastknownlocation:{\n       type:'object'\n   }\n  \n   \n  }\n};\n\nvar locationObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['longitude', 'latitude'],\n properties: {\n    longitude: {\n    // should be number in feature\n      type: 'number'\n    },\n    latitude:{\n        // should be number in feature\n        type: 'number'\n    }\n }\n };\n\n\ndescribe('Get List of VehichleInfo', function() {\n    it('Should Return List of VehichleInfo', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of VehichleInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var alertResponse = response.body[i];\n          \n          alertResponse.should.be.an('object');\n        alertResponse.should.have.property('vehiclePlatform').and.not.empty;\n        alertResponse.should.have.property('vehicleModel').and.not.empty;\n        alertResponse.should.have.property('vehicleVariant').and.not.empty;\n        alertResponse.should.have.property('vehicleRegNo').and.not.empty;\n        alertResponse.should.have.property('status').and.not.empty;\n        alertResponse.should.have.property('lastupdated').and.not.empty;\n        alertResponse.should.have.property('priorityAlertStatus');\n        alertResponse.should.have.property('address').and.not.empty;\n        alertResponse.should.have.property('speed').and.not.empty;\n        alertResponse.should.have.property('runningHours').and.not.empty;\n        alertResponse.should.have.property('driverName');\n        alertResponse.should.have.property('lastknownlocation').and.not.empty;\n        \n        validvehichleList = tv4.validate(alertResponse, vehicleInfoObj);\n          tests[\"Valid VehichleList\"] = validvehichleList;\n          \n           validLocationInfo = tv4.validate(alertResponse.lastknownlocation, locationObj);\n             tests[\"Valid Vehichle LocationInfo\"] = validLocationInfo;\n      }\n     \n    });\n    \n    \n\n});\n      \n      \n    ",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "2326d868-2da8-017d-55bc-809e398ee3c8",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api//report/platform/mtbd/alerts/alertssummary//TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "/report/platform/mtbd/alerts/alertssummary/",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493114946248,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "2ba845b4-90c5-4626-14b4-fed99dcbcdf9",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api/report/platform/mtbd/vehiclemovement/speeddata/TN 03 MM 1001/?startDate=2016-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "speeddata",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493100387487,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "31ba8421-a781-1e78-5ecb-26e1a887c663",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\nContent-Type: application/json\n",
			"url": "http://localhost:49963/api/driverProfiles/199",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "PATCH",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Update driver",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493029898130,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar driverProfileObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['id', 'firstName','lastName','contactNumber','address','fileUrl','email','idProofTypeId','idProofNumber','benchmarkFE','benchmarkDistance','ranking','assignedVehicles'],\n properties: {\n    id: {\n    \n      type: 'object'\n    },\n    firstName:{\n        \n        type: 'object'\n    },\n   contactNumber:{\n       type:'object'\n   },\n  address:{\n      type:'object'\n  },\n\n  idProofTypeId:{\n      type:'object'\n  },\n  idProofNumber:{\n      type:'object'\n  },\n  fileUrl:{\n       type:'object'\n   },\n  email:{\n      type:'object'\n  },\n  benchmarkFE:{\n      type:'object'\n  },\n  \n  benchmarkDistance:{\n       type:'object'\n   },\n  ranking:{\n      type:'object'\n  },\n  assignedVehicles:{\n      type:'array'\n  }\n  \n }\n};\n \nvar attributeObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['value', 'type','editable'],\n properties: {\n    value: {\n    // should be number in feature\n      type: 'string'\n    },\n    type:{\n        // should be number in feature\n        type: 'string'\n    },\n   editable:{\n       type:'boolean'\n   } \n }\n};\n\nvar stringArrayObj = {\n  \"items\": {\n    \"type\": \"string\"\n  }\n};\n\ndescribe('Get List of Drivers', function() {\n    it('Should Return List of Drivers', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of DriversInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var driverInfo = response.body[i];\n          driverInfo.should.be.an('object');\n        driverInfo.should.have.property('id').and.not.empty;\n        driverInfo.should.have.property('firstName').and.not.empty;\n        driverInfo.should.have.property('lastName').and.not.empty;\n        driverInfo.should.have.property('contactNumber').and.not.empty;\n        driverInfo.should.have.property('address').and.not.empty;\n        driverInfo.should.have.property('fileUrl').and.not.empty;\n        driverInfo.should.have.property('email').and.not.empty;\n        driverInfo.should.have.property('benchmarkFE').and.not.empty;\n        driverInfo.should.have.property('benchmarkDistance').and.not.empty;\n        driverInfo.should.have.property('ranking').and.not.empty;\n        driverInfo.should.have.property('assignedVehicles');\n       \n          // alert(\"id:\" +tv4.validate(driverInfo.id, attributeObj));\n         \n         \n        \n        validDriveProfile = tv4.validate(driverInfo, driverProfileObj);\n          tests[\"valid DriveProfile\"] = validDriveProfile;\n          \n          \n          validVehichleList = tv4.validate(driverInfo.assignedVehicles, stringArrayObj);\n          tests[\"valid VehichleList\"] = validVehichleList;\n         \n          \n}\n});\n});\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "[{\n  \"field\": \"firstName\",\n  \"value\": \"Jasmit Singh\"\n\n\n}]"
		},
		{
			"id": "32e88745-f6a3-c5a4-c62e-2136a007ed06",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api//locationHistory/MH 30 NL 7384/?startDate=2016-01-01 00:00:00&endDate=2017-04-25 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "http://localhost:49963/api//locationHistory/MH 30 NL 7384/?startDate=2016-01-01 00:00:00&endDate=2017-04-25 00:00:00",
			"description": "http://localhost:49963/api//locationHistory/MH 30 NL 7384/?startDate=2016-01-01 00:00:00&endDate=2017-04-25 00:00:00",
			"descriptionFormat": "html",
			"time": 1493210528472,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "3b67ad20-d931-f6aa-bf5b-c4692edfa88f",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api//report/platform/mtbd/alerts/violation//TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "/report/platform/mtbd/alerts/violation/",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493114923039,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "3b8f1912-ffff-19a2-3300-c5b786fab725",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963//api/listVehicles",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Listof vehichles",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493024565620,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar vehicleInfoObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['vehiclePlatform', 'vehicleModel','vehicleVariant','vehicleRegNo','status','lastupdated','priorityAlertStatus','address','speed','runningHours','driverName','lastknownlocation'],\n  properties: {\n    vehiclePlatform: {\n      type: 'string'\n    },\n    vehicleModel: {\n      type: 'string'\n    },\n    vehicleVariant: {\n        type: 'string'\n    },\n    vehicleRegNo:{\n        type:'string'\n    },\n   status:{\n       type: 'string'\n   }, \n    lastupdated:{\n       type: 'string'\n   },\n    priorityAlertStatus:{\n       type: 'boolean'\n   },\n    address:{\n       type: 'string'\n   },\n    speed:{\n       type: 'string'\n   },\n    runningHours:{\n       type: 'string'\n   },\n    driverName:{\n       type: 'string'\n   },\n   lastknownlocation:{\n       type:'object'\n   }\n  \n   \n  }\n};\n\nvar locationObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['longitude', 'latitude'],\n properties: {\n    longitude: {\n    // should be number in feature\n      type: 'number'\n    },\n    latitude:{\n        // should be number in feature\n        type: 'number'\n    }\n }\n };\n\n\ndescribe('Get List of VehichleInfo', function() {\n    it('Should Return List of VehichleInfo', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of VehichleInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var alertResponse = response.body[i];\n          \n          alertResponse.should.be.an('object');\n        alertResponse.should.have.property('vehiclePlatform').and.not.empty;\n        alertResponse.should.have.property('vehicleModel').and.not.empty;\n        alertResponse.should.have.property('vehicleVariant').and.not.empty;\n        alertResponse.should.have.property('vehicleRegNo').and.not.empty;\n        alertResponse.should.have.property('status').and.not.empty;\n        alertResponse.should.have.property('lastupdated').and.not.empty;\n        alertResponse.should.have.property('priorityAlertStatus');\n        alertResponse.should.have.property('address').and.not.empty;\n        alertResponse.should.have.property('speed').and.not.empty;\n        alertResponse.should.have.property('runningHours').and.not.empty;\n        alertResponse.should.have.property('driverName');\n        alertResponse.should.have.property('lastknownlocation').and.not.empty;\n        \n        validvehichleList = tv4.validate(alertResponse, vehicleInfoObj);\n          tests[\"Valid VehichleList\"] = validvehichleList;\n          \n           validLocationInfo = tv4.validate(alertResponse.lastknownlocation, locationObj);\n             tests[\"Valid Vehichle LocationInfo\"] = validLocationInfo;\n      }\n     \n    });\n    \n    \n\n});\n      \n      \n    ",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "3c798983-319c-6aaa-9c97-3caabb06c3d3",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/alert",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\nvar genericAlertObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['alertId', 'priority','alertName','dateTime','location'],\n  properties: {\n    alertId: {\n      type: 'string'\n    },\n    priority: {\n      type: 'string'\n    },\n    alertName: {\n        type: 'string'\n    },\n   dateTime:{\n       type: 'string'\n   }, \n   location:{\n       type:'object'\n   },\n  \n   \n  }\n};\n\nvar locationAlertObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['longitude', 'latitude'],\n properties: {\n    longitude: {\n    // should be number in feature\n      type: 'number'\n    },\n    latitude:{\n        // should be number in feature\n        type: 'number'\n    }\n }\n};\n\nvar alertObj = {\n  title: ' schema v1',\n  type: 'object',\n  required: ['vehicleRegNo', 'Alert'],\n  properties: {\n    vehicleRegNo: {\n      type: 'string'\n    },\n    Alert: {\n      type: 'array',\n   /* items: {\n         $ref: '#/simpleAlert',required:'true'\n         \n      }*/\n    \n    }\n      \n    \n  }\n};\n\n//tv4.addSchema('aSchema', aSchema);\n\ndescribe('Get Generic Alert Info', function() {\n    it('Should Return Generic Alert Data', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n \n    it('Should Have a Valid Generic Alerts ', function() {\n      var alertResponse = response.body[0];\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('vehicleRegNo').and.not.empty;\n      alertResponse.should.have.property('Alert').and.not.empty;\n      \n      for(var j=0;j<response.body.length;j++){\n          var alert = response.body[j];\n          alert.should.be.an('object').and.not.empty;\n          var validAlert = tv4.validate(alert, alertObj);\n          tests[\"Valid Generic Alert\"] = validAlert;\n          var alertInfo = alert.Alert;\n          for(var i=0;i<alertInfo.length;i++){\n              var validAlertInfo = tv4.validate(alertInfo[i],genericAlertObj);\n             tests[\"Valid Generic AlertInfo\"] = validAlertInfo;\n             var validLocationInfo = tv4.validate(alertInfo[i].location, locationAlertObj);\n             tests[\"Valid Generic LocationInfo\"] = validLocationInfo;\n             \n              \n               \n          }\n          \n      }\n\n    });\n\n});\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493283029265,
			"name": "Generic alerts",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "3e396e22-3b1a-b6e7-71e1-0ab201da41c6",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api/report/platform/mtbd/vehiclemovement/usagetime/TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": null,
			"version": 2,
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493096834968,
			"name": "usage report",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": []
		},
		{
			"id": "3f5f0b94-c4fc-1cf8-dbc3-040c521a00ee",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/driverProfiles",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "list of drivers",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493028465851,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar driverProfileObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['id', 'firstName','lastName','contactNumber','address','fileUrl','email','idProofTypeId','idProofNumber','benchmarkFE','benchmarkDistance','ranking','assignedVehicles'],\n properties: {\n    id: {\n    \n      type: 'object'\n    },\n    firstName:{\n        \n        type: 'object'\n    },\n   contactNumber:{\n       type:'object'\n   },\n  address:{\n      type:'object'\n  },\n  idProofTypeId:{\n      type:'object'\n  },\n  idProofNumber:{\n      type:'object'\n  },\n  fileUrl:{\n       type:'object'\n   },\n  email:{\n      type:'object'\n  },\n  benchmarkFE:{\n      type:'object'\n  },\n  \n  benchmarkDistance:{\n       type:'object'\n   },\n  ranking:{\n      type:'object'\n  },\n  assignedVehicles:{\n      type:'array'\n  }\n  \n }\n};\n \nvar attributeObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['value', 'type','editable'],\n properties: {\n    value: {\n    // should be number in feature\n      type: 'string'\n    },\n    type:{\n        // should be number in feature\n        type: 'string'\n    },\n   editable:{\n       type:'boolean'\n   } \n }\n};\n\nvar stringArrayObj = {\n  \"items\": {\n    \"type\": \"string\"\n  }\n};\n\ndescribe('Get List of Drivers', function() {\n    it('Should Return List of Drivers', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of DriversInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var driverInfo = response.body[i];\n          driverInfo.should.be.an('object');\n        driverInfo.should.have.property('id').and.not.empty;\n        driverInfo.should.have.property('firstName').and.not.empty;\n        driverInfo.should.have.property('lastName').and.not.empty;\n        driverInfo.should.have.property('contactNumber').and.not.empty;\n        driverInfo.should.have.property('address').and.not.empty;\n       \n        driverInfo.should.have.property('fileUrl').and.not.empty;\n        driverInfo.should.have.property('email').and.not.empty;\n        driverInfo.should.have.property('benchmarkFE').and.not.empty;\n        driverInfo.should.have.property('benchmarkDistance').and.not.empty;\n        driverInfo.should.have.property('ranking').and.not.empty;\n        driverInfo.should.have.property('assignedVehicles');\n       \n          // alert(\"id:\" +tv4.validate(driverInfo.id, attributeObj));\n         \n         \n        \n        validDriveProfile = tv4.validate(driverInfo, driverProfileObj);\n          tests[\"valid DriveProfile\"] = validDriveProfile;\n          \n          \n          validVehichleList = tv4.validate(driverInfo.assignedVehicles, stringArrayObj);\n          tests[\"valid VehichleList\"] = validVehichleList;\n         \n          \n}\n});\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "4432950d-e00e-3966-9e00-a2a475d6e940",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Ik1UQkRPd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MDU5NjkyOSwibmJmIjoxNDkwNTk1MTI5fQ.Jl4qlpyFXqI0xmftIu4NKjnCecYE91OqHjyD4meRMw0\nContent-Type: application/json\n",
			"url": "http://localhost:49963/api/geofence\n\n\n\n",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Create Geofence",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493033072961,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\nvar geofenceNameObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['name', 'points'],\n  properties: {\n    name: {\n      type: 'string'\n    },\n    points: {\n      type: 'array'\n    },\n    \n  }\n};\n\nvar pointsObj={\n    title: 'schema v12',\n    type:   'object',\n    required:   ['longitude','latitude'],\n    properties:{\n        longitude:\n        {\n            type:   'number'\n            \n        },\n        latitude:\n        {\n            type:   'number'\n        },\n    }\n    \n};\n\ndescribe('post the Geofence points', function() {\n    it('Should Return Geofence points Data', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    it('Should Have a Valid Geofence pointsList ', function() {\n      var alertResponse = response.body[0];\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('name').and.not.empty;\n      alertResponse.should.have.property('points').and.not.empty;\n      \n      for(var j=0;j<response.body.length;j++){\n          var geofenceNames = response.body[j];\n          geofenceNames.should.be.an('object').and.not.empty;\n           validList = tv4.validate(geofenceNameObj, geofenceNames);\n          tests[\"Valid Geofence Names List\"] = validList;\n        var pointsInfo = geofenceNames.points;\n        for(var i=0;i<pointsInfo.length;i++){\n              var validGeofenceInfo = tv4.validate(pointsInfo[i],pointsObj);\n             tests[\"Valid Generic AlertInfo\"] = validGeofenceInfo;\n        }\n      }\n    }); \n    \n});\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "[\n{\n \"name\": \"tests0\",\n \"points\": [\n  {\n        \"longitude\": 79.435904243728146,\n        \"latitude\": 12.69660094403068\n      },\n      {\n        \"longitude\": 79.470236519118771,\n        \"latitude\": 12.739468070216359\n      },\n      {\n        \"longitude\": 79.569113472243771,\n        \"latitude\": 12.716695810659747\n      }\n  ]\n  }\n  ]"
		},
		{
			"id": "4f4f89a3-c7c1-15ea-f442-1cf9dbd48472",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\nstartDate: 2016-01-01 00:00:00\nendDate: 2017-04-25 00:00:00\n",
			"url": "http://localhost:49963/api/geofence/ddd/vehicles/?startDate=2016-01-01 00:00:00&endDate=2017-04-25 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "Geofencebased on vehicles with date",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493039402341,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "532e467f-8744-9f5d-3196-12965b92126a",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/expenseCategory/AP 09 KU 9999",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "ExpenseCategory",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493032974949,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\n\n\n\ndescribe('Get List of Drivers', function() {\n    it('Should Return List of Drivers', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n});\nit('Should Have a Valid ExpenseMessage  ', function() {\n    for(var i=0;i<response.body.length;i++){\n       \n      var expenseObj = response.body[i];\n      expenseObj.should.be.an('object');\n      expenseObj.should.have.property('label').and.not.empty;\n     \n         \n    }\n     });\n",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "575791d3-549e-e6f3-1239-c1e36910138b",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/expense/AP 09 KU 9999?startDate=2016-01-01 00:00:00&endDate=2017-04-23 00:00:00",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "IncidentalExpenses",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493027048860,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar expenseObj ={\n     title: ' schema v12',\n     type: 'object',\n     required: ['label', 'value'],\n     properties: {\n    label: {\n    \n      type: 'string'\n    },\n    value:{\n        type:'string'\n}\n     }\n};\nvar incidentalExpenseObj ={\n     title: ' schema v13',\n     type: 'object',\n     required: ['expense','tripName','startDate','endDate','tripStatus'],\n     properties: {\n    expense: {\n         type:'array'\n    },\n   tripName: {\n         type:'string'\n    },\n    startDate: {\n         type:'string'\n    },\n    endDate: {\n         type:'string'\n    },\n    tripStatus: {\n         type:'string'\n    }\n    },\n};\ndescribe('Get Expense Info', function() {\n    it('Should Return Expense Info Data', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n     it('Should Have a Valid List of  Expense Info', function() {\n           var expenseInfo = response.body[0];\n          expenseInfo.should.be.an('object');\n          expenseInfo.should.have.property('expense').and.not.empty;\n        expect( expenseInfo.should.have.property('tripName')).and.not.empty;\n          expenseInfo.should.have.property('startDate').and.not.empty;\n          expenseInfo.should.have.property('endDate').and.not.empty;\n         expect( expenseInfo.should.have.property('tripStatus')).and.not.empty;\n        \n      for(var i=0;i<response.body.length;i++){\n        var incidentalExpenseInfo = response.body[i];\n        incidentalExpenseInfo.should.be.an('object');\n         validExpenseList = tv4.validate(incidentalExpenseInfo, incidentalExpenseObj);\n          tests[\"Valid Expense Info List\"] = validExpenseList;\n          }\n          for(var j =0 ; j<incidentalExpenseInfo.expense.length;j++){\n              \n              var expenseInfoObj = incidentalExpenseInfo.expense[j];\n              expenseInfoObj.should.be.an('object');\n              expenseInfoObj.should.have.property('label').and.not.empty;\n               expenseInfoObj.should.have.property('value').and.not.empty;\n              validExpenseInfo = tv4.validate(expenseInfoObj,expenseObj);\n              tests[\"valid Expense Array\"] = validExpenseInfo;\n          }\n     });\n});\n    \n",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "587bfa18-1bcc-9b8e-fab8-a444b7a727c4",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\nContent-Type: application/json\n",
			"url": "http://localhost:49963/api/vehicleMappingWithDriver/AP 09 KU 9999/199",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Mapping Driver to Vehichle",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493028928361,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar vehicleInfoObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['vehiclePlatform', 'vehicleModel','vehicleVariant','vehicleRegNo','status','lastupdated','priorityAlertStatus','address','speed','runningHours','driverName','lastknownlocation'],\n  properties: {\n    vehiclePlatform: {\n      type: 'string'\n    },\n    vehicleModel: {\n      type: 'string'\n    },\n    vehicleVariant: {\n        type: 'string'\n    },\n    vehicleRegNo:{\n        type:'string'\n    },\n   status:{\n       type: 'string'\n   }, \n    lastupdated:{\n       type: 'string'\n   },\n    priorityAlertStatus:{\n       type: 'boolean'\n   },\n    address:{\n       type: 'string'\n   },\n    speed:{\n       type: 'string'\n   },\n    runningHours:{\n       type: 'string'\n   },\n    driverName:{\n       type: 'string'\n   },\n   lastknownlocation:{\n       type:'object'\n   },\n  \n   \n  }\n};\n\nvar locationObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['longitude', 'latitude'],\n properties: {\n    longitude: {\n    // should be number in feature\n      type: 'number'\n    },\n    latitude:{\n        // should be number in feature\n        type: 'number'\n    }\n }\n };\n\n\ndescribe('Get List of VehichleInfo', function() {\n    it('Should Return List of VehichleInfo', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of VehichleInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var mappingDriverInfo = response.body[i];\n          mappingDriverInfo.should.be.an('object');\n        mappingDriverInfo.should.have.property('vehiclePlatform').and.not.empty;\n        mappingDriverInfo.should.have.property('vehicleModel').and.not.empty;\n        mappingDriverInfo.should.have.property('vehicleVariant').and.not.empty;\n        mappingDriverInfo.should.have.property('vehicleRegNo').and.not.empty;\n        mappingDriverInfo.should.have.property('status').and.not.empty;\n        mappingDriverInfo.should.have.property('lastupdated').and.not.empty;\n        mappingDriverInfo.should.have.property('priorityAlertStatus');\n        mappingDriverInfo.should.have.property('address').and.not.empty;\n        mappingDriverInfo.should.have.property('speed').and.not.empty;\n        mappingDriverInfo.should.have.property('runningHours').and.not.empty;\n       expect(mappingDriverInfo.should.have.property('driverName')).and.not.empty;\n        mappingDriverInfo.should.have.property('lastknownlocation').and.not.empty;\n        \n        validvehichleList = tv4.validate(mappingDriverInfo, vehicleInfoObj);\n          tests[\"Valid VehichleList\"] = validvehichleList;\n          \n          var validLocationInfo = tv4.validate(mappingDriverInfo.lastknownlocation, locationObj);\n             tests[\"Valid Vehichle LocationInfo\"] = validLocationInfo;\n      }\n     \n    });\n    \n    \n\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": ""
		},
		{
			"id": "5bec74b0-3240-ea37-ac3a-99fe8a52f28e",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963//api/geofence/ddd",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "Get Geofence with Name",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493038491323,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\nvar geofenceNameObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['name', 'points'],\n  properties: {\n    name: {\n      type: 'string'\n    },\n    points: {\n      type: 'array'\n    },\n    \n  }\n};\nvar pointsObj={\n    title: 'schema v12',\n    type:   'object',\n    required:   ['longitude','latitude'],\n    properties:{\n        longitude:\n        {\n            type:   'number'\n            \n        },\n        latitude:\n        {\n            type:   'number'\n        },\n    }\n    \n};\ndescribe('post the Geofence points', function() {\n    it('Should Return Geofence points Data', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    it('Should Have a Valid Geofence pointsList ', function() {\n      var alertResponse = response.body[0];\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('name').and.not.empty;\n      alertResponse.should.have.property('points').and.not.empty;\n      \n      for(var j=0;j<response.body.length;j++){\n          var geofenceNames = response.body[j];\n          geofenceNames.should.be.an('object').and.not.empty;\n           validList = tv4.validate(geofenceNameObj, geofenceNames);\n          tests[\"Valid Geofence Names List\"] = validList;\n        var pointsInfo = geofenceNames.points;\n        for(var i=0;i<pointsInfo.length;i++){\n              var validGeofenceInfo = tv4.validate(pointsInfo[i],pointsObj);\n             tests[\"Valid Generic AlertInfo\"] = validGeofenceInfo;\n        }\n      }\n    }); \n    \n});\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "5fd09dde-5013-c1ff-f925-7aa1cb31a1d9",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\nContent-Type: application/json\n",
			"url": "http://localhost:49963/api/driverProfiles/199",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Get driver",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493028709595,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar driverProfileObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['id', 'firstName','lastName','contactNumber','address','fileUrl','email','idProofTypeId','idProofNumber','benchmarkFE','benchmarkDistance','ranking','assignedVehicles'],\n properties: {\n    id: {\n    \n      type: 'object'\n    },\n    firstName:{\n        \n        type: 'object'\n    },\n   contactNumber:{\n       type:'object'\n   },\n  address:{\n      type:'object'\n  },\n\n  idProofTypeId:{\n      type:'object'\n  },\n  idProofNumber:{\n      type:'object'\n  },\n  fileUrl:{\n       type:'object'\n   },\n  email:{\n      type:'object'\n  },\n  benchmarkFE:{\n      type:'object'\n  },\n  \n  benchmarkDistance:{\n       type:'object'\n   },\n  ranking:{\n      type:'object'\n  },\n  assignedVehicles:{\n      type:'array'\n  }\n  \n }\n};\n \nvar attributeObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['value', 'type','editable'],\n properties: {\n    value: {\n    // should be number in feature\n      type: 'string'\n    },\n    type:{\n        // should be number in feature\n        type: 'string'\n    },\n   editable:{\n       type:'boolean'\n   } \n }\n};\n\nvar stringArrayObj = {\n  \"items\": {\n    \"type\": \"string\"\n  }\n};\n\ndescribe('Get List of Drivers', function() {\n    it('Should Return List of Drivers', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of DriversInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var driverInfo = response.body[i];\n          driverInfo.should.be.an('object');\n        driverInfo.should.have.property('id').and.not.empty;\n        driverInfo.should.have.property('firstName').and.not.empty;\n        driverInfo.should.have.property('lastName').and.not.empty;\n        driverInfo.should.have.property('contactNumber').and.not.empty;\n        driverInfo.should.have.property('address').and.not.empty;\n        driverInfo.should.have.property('fileUrl').and.not.empty;\n        driverInfo.should.have.property('email').and.not.empty;\n        driverInfo.should.have.property('benchmarkFE').and.not.empty;\n        driverInfo.should.have.property('benchmarkDistance').and.not.empty;\n        driverInfo.should.have.property('ranking').and.not.empty;\n        driverInfo.should.have.property('assignedVehicles');\n       \n          // alert(\"id:\" +tv4.validate(driverInfo.id, attributeObj));\n         \n         \n        \n        validDriveProfile = tv4.validate(driverInfo, driverProfileObj);\n          tests[\"valid DriveProfile\"] = validDriveProfile;\n          \n          \n          validVehichleList = tv4.validate(driverInfo.assignedVehicles, stringArrayObj);\n          tests[\"valid VehichleList\"] = validVehichleList;\n         \n          \n}\n});\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "[{\n  \"field\": \"firstName\",\n  \"value\": \"Hellwwwo\",\n  \"type\": \"string\",\n  \"editable\": true\n}]"
		},
		{
			"id": "6530908e-04fc-b916-3724-e6687714d140",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/reportSummary/platform/mtbd/health ",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "ReportsummaryHealth",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493028470016,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar reportSummaryHealthObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['totalBreakdownsOccurred', 'totalBreakdownsClosed','vehiclehealth'],\n properties: {\n    totalBreakdownsOccurred: {\n    \n      type: 'number'\n    },\n    totalBreakdownsClosed:{\n        \n        type: 'number'\n    },\n   vehiclehealth:{\n       type:'object'\n   }\n }\n};\n\nvar vehichleHealthObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['good', 'bad','warning'],\n properties: {\n    good: {\n      type: 'number'\n    },\n    bad:{\n        type: 'number'\n    },\n    warning:{\n        type: 'number'\n    }\n }\n};\n\ndescribe('Get List of ReportSummaryHealth', function() {\n    it('Should Return List of ReportSummaryHealthInfo', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of ReportSummaryHealthInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var healthResponse = response.body[i];\n          healthResponse.should.be.an('object');\n       expect( healthResponse.should.have.property('totalBreakdownsOccurred')).and.not.empty;\n       expect( healthResponse.should.have.property('totalBreakdownsClosed')).and.not.empty;\n        expect(healthResponse.should.have.property('vehiclehealth')).and.not.empty;\n        \n       \n        \n        validHealthList = tv4.validate(healthResponse, reportSummaryHealthObj);\n          tests[\"Valid ReportSummaryHealthList\"] = validHealthList;\n          var vehichleHealthInfo = tv4.validate(healthResponse.vehiclehealth, vehichleHealthObj);\n             tests[\"Valid Vehichle HealthInfo\"] = vehichleHealthInfo;\n          \n          \n      }\n     \n    });\n    \n    \n    \n});\n\n",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "68dd7843-1b11-766f-574d-d54352ddd384",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\nContent-Type: application/json\n",
			"url": "http://localhost:51820/api/create\n\n\n\n",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\nvar geofenceNameObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['name', 'points'],\n  properties: {\n    name: {\n      type: 'string'\n    },\n    points: {\n      type: 'array'\n    },\n    \n  }\n};\n\nvar pointsObj={\n    title: 'schema v12',\n    type:   'object',\n    required:   ['longitude','latitude'],\n    properties:{\n        longitude:\n        {\n            type:   'number'\n            \n        },\n        latitude:\n        {\n            type:   'number'\n        },\n    }\n    \n};\n\ndescribe('post the Geofence points', function() {\n    it('Should Return Geofence points Data', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    it('Should Have a Valid Geofence pointsList ', function() {\n      var alertResponse = response.body[0];\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('name').and.not.empty;\n      alertResponse.should.have.property('points').and.not.empty;\n      \n      for(var j=0;j<response.body.length;j++){\n          var geofenceNames = response.body[j];\n          geofenceNames.should.be.an('object').and.not.empty;\n           validList = tv4.validate(geofenceNameObj, geofenceNames);\n          tests[\"Valid Geofence Names List\"] = validList;\n        var pointsInfo = geofenceNames.points;\n        for(var i=0;i<pointsInfo.length;i++){\n              var validGeofenceInfo = tv4.validate(pointsInfo[i],pointsObj);\n             tests[\"Valid Generic AlertInfo\"] = validGeofenceInfo;\n        }\n      }\n    }); \n    \n});\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493373165147,
			"name": "Create Geofence post",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": [],
			"rawModeData": "{\r\n\"booname\":\"test\",\r\n\"ISBN\":\"8399iikkdd\",\r\n\"Review\":[{\r\n\"reviewid\":\"546546\",\r\n\"BookID\":\"zaidsBook\",\r\n\"ReviewText\":\"Test\"\r\n}]\r\n}\r\n\r\n  \r\n  \r\n  \r\n\r\n"
		},
		{
			"id": "6ddedd39-5000-b3ba-aead-8b90b0940c45",
			"headers": "token: {{token}}\n",
			"url": "{{url}}/geofence/test",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "DELETE",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "Delete Geofence",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493038513010,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\ndescribe('Get DeleteGeoPoints Info', function() {\n    it('Should Return DeleteGeoPoints Info', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n     it('Should Have a Valid DeleteGeoPointsrMessage  ', function() {\n      var alertResponse = response.body;\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('Message').and.not.empty;\n     \n     });\n});",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "71f38d1c-6028-81ab-7182-af65c13e51a8",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api///report/platform/mtbd/delivery/vehicleusage//TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "/report/platform/mtbd/delivery/vehicleusage/",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493114962100,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "731be266-30ca-104b-f2a2-444b87cae9b5",
			"headers": "Content-Type: application/json\n",
			"url": "http://localhost:49963//api/login",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493272308884,
			"name": "http://localhost:49963//api/login",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": [],
			"rawModeData": "{\r\n  \"username\": \"kingkhan\",\r\n  \"newPassword\": \"Test@123\",\r\n  \"remember_me\":true\r\n}"
		},
		{
			"id": "7335037a-6ea7-193e-9286-6cc44cefd62a",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api/report/platform/mtbd/vehiclehealth/vehiclehealthsummary//TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "/report/platform/mtbd/vehiclehealth/vehiclehealthsummary/",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493115013423,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "75ac3ff6-c764-471c-d8f2-b89037ef0a67",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/driverProfiles/334",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "DELETE",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "Delete driver",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493030767616,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\ndescribe('Get DeleteDriver Info', function() {\n    it('Should Return DeleteDriver Info', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n     it('Should Have a Valid DeleteDriverMessage  ', function() {\n      var alertResponse = response.body;\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('Message').and.not.empty;\n     \n     });\n});",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "7dce3bc1-ae40-608f-139e-6613f5329330",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/reportSummary/platform/mtbd/status",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "ReportStatus",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493039513509,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "7e83d9ec-fa7d-7b7c-ded6-cc9888bd7a96",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963//api/geofence",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "Get Geofence",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493038460729,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\nvar geofenceNameObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['name', 'points'],\n  properties: {\n    name: {\n      type: 'string'\n    },\n    points: {\n      type: 'array'\n    },\n    \n  }\n};\nvar pointsObj={\n    title: 'schema v12',\n    type:   'object',\n    required:   ['longitude','latitude'],\n    properties:{\n        longitude:\n        {\n            type:   'number'\n            \n        },\n        latitude:\n        {\n            type:   'number'\n        },\n    }\n    \n};\ndescribe('post the Geofence points', function() {\n    it('Should Return Geofence points Data', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    it('Should Have a Valid Geofence pointsList ', function() {\n      var alertResponse = response.body[0];\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('name').and.not.empty;\n      alertResponse.should.have.property('points').and.not.empty;\n      \n      for(var j=0;j<response.body.length;j++){\n          var geofenceNames = response.body[j];\n          geofenceNames.should.be.an('object').and.not.empty;\n           validList = tv4.validate(geofenceNameObj, geofenceNames);\n          tests[\"Valid Geofence Names List\"] = validList;\n        var pointsInfo = geofenceNames.points;\n        for(var i=0;i<pointsInfo.length;i++){\n              var validGeofenceInfo = tv4.validate(pointsInfo[i],pointsObj);\n             tests[\"Valid Generic AlertInfo\"] = validGeofenceInfo;\n        }\n      }\n    }); \n    \n});\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "8c86a2a7-36f2-7b7a-0195-f00e794a3e49",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api/report/platform/mtbd/vehiclemovement/enginerpm/TN 03 MM 1001/?startDate=2016-01-21 00:00:00&endDate=2017-04-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "EngineRPM",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493100348707,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "a2c75605-bc8b-9265-9268-f4a872d8ce90",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api//report/platform/mtbd/vehiclemovement/enginerpm//TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": null,
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493099853295,
			"name": "Engine RPM",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": []
		},
		{
			"id": "a84779af-99a6-3abe-f01b-c505d52448d8",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api/report/platform/mtbd/alerts/alertssummary//TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "api/report/platform/mtbd/alerts/alertssummary/",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493289927977,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "ad5deb5b-3d9f-838c-f0e8-b94c54417e48",
			"headers": "token: {{token}}\nstartDate: {{startDate}}\nendDate: {{endDate}}\n",
			"url": "http://localhost:49963/api/geofence/ddd",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "PATCH",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Geofencebased on vehicles with date",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493211504209,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "[\r\n  {\r\n    \"name\": \"test\",\r\n    \"points\": [{ \r\n        \"longitude\": 79.43, \r\n        \"latitude\": 12.69 \r\n      }, \r\n      { \r\n        \"longitude\": 79.47, \r\n        \"latitude\": 12.73 \r\n      }, \r\n      { \r\n        \"longitude\": 79.56, \r\n        \"latitude\": 12.716 \r\n      }]\r\n\r\n  }\r\n]"
		},
		{
			"id": "aefbaf9b-a1df-00ad-0071-7dcbf33691f9",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/LocationHistory/AP 09 KU 9999?startDate=2016-01-01 13:00:00&endDate=2017-04-23 00:00:00",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n//  Remove longitude and latitude values from response ...\n\nvar locationHistoryObj = {\n    title: ' schema v11',\n    type: 'object',\n    required: ['speed', 'address', 'timeStamp', 'location'],\n    properties: {\n        speed: {\n            type: 'string'\n        },\n        address: {\n            type: 'string'\n        },\n        timeStamp: {\n            type: 'string'\n        },\n\n        location: {\n            type: 'object'\n        },\n\n\n    }\n};\nvar locationObj = {\n    title: ' schema v12',\n    type: 'object',\n    required: ['longitude', 'latitude'],\n    properties: {\n        longitude: {\n            // should be number in feature\n            type: 'number'\n        },\n        latitude: {\n            // should be number in feature\n            type: 'number'\n        }\n    }\n};\n\n\ndescribe('Get Location History Info', function() {\n    it('Should Return Location History Info Data', function() {\n        response.should.have.status(200);\n        response.should.be.json;\n        response.body.should.not.be.empty;\n    });\n\n    it('Should Have a Location History Info Data ', function() {\n        var alertResponse = response.body[0];\n        alertResponse.should.be.an('object');\n        alertResponse.should.have.property('speed').and.not.empty;\n        alertResponse.should.have.property('address').and.not.empty;\n        alertResponse.should.have.property('timeStamp').and.not.empty;\n        //alertResponse.should.have.property('contactNumber').and.not.empty;\n        alertResponse.should.have.property('location').and.not.empty;\n        for (var j = 0; j < response.body.length; j++) {\n            var vehichleList = response.body[j];\n            vehichleList.should.be.an('object').and.not.empty;\n            validList = tv4.validate(vehichleList, locationHistoryObj);\n            tests[\"Location History Info\"] = validList;\n            var validLocationInfo = tv4.validate(alertResponse.location, locationObj);\n            tests[\"LocationHistory of Lat and Long Info\"] = validLocationInfo;\n\n        }\n    });\n\n\n\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493185619425,
			"name": "LocationHistory",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "bf5877f8-730d-31e7-958c-8fcaa1d81e5a",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\nContent-Type: application/json\n",
			"url": "http://localhost:49963/api/profile",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "PATCH",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Update CurrentUserProfile",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493030304745,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar userProfileObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['id', 'firstName','lastName','contactNumber','address','idProof','fileUrl','email'],\n properties: {\n    id: {\n    \n      type: 'object'\n    },\n    firstName:{\n        \n        type: 'object'\n    },\n    lastName:{\n        \n        type: 'object'\n    },\n   contactNumber:{\n       type:'object'\n   },\n  address:{\n      type:'object'\n  },\n  idProof:{\n      type:'object'\n  },\n  fileUrl:{\n       type:'object'\n   },\n  email:{\n      type:'object'\n  },\n  \n \n }\n};\n \nvar attributeObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['value', 'type','editable'],\n properties: {\n    value: {\n    // should be number in feature\n      type: 'string'\n    },\n    type:{\n        // should be number in feature\n        type: 'string'\n    },\n   editable:{\n       type:'boolean'\n   } \n }\n};\n\nvar stringArrayObj = {\n  \"items\": {\n    \"type\": \"string\"\n  }\n};\n\ndescribe('Get List of UserProfile', function() {\n    it('Should Return List of UserProfile', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of  UserProfileInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var profileInfo = response.body[i];\n           profileInfo.should.be.an('object');\n         profileInfo.should.have.property('id').and.not.empty;\n         profileInfo.should.have.property('firstName').and.not.empty;\n         profileInfo.should.have.property('lastName').and.not.empty;\n         profileInfo.should.have.property('contactNumber').and.not.empty;\n         profileInfo.should.have.property('address').and.not.empty;\n         profileInfo.should.have.property('idProof').and.not.empty;\n         profileInfo.should.have.property('fileUrl').and.not.empty;\n         profileInfo.should.have.property('email').and.not.empty;\n    \n       \n           //alert(\"id:\" +tv4.validate(driverInfo.id, attributeObj));\n         \n          profileId = tv4.validate(profileInfo.id, attributeObj);\n        tests[\"profile Id\"] = profileId;\n         profileFirstName = tv4.validate(profileInfo.firstName, attributeObj);\n        tests[\"profile FirstName\"] = profileFirstName;\n         profileLastName = tv4.validate(profileInfo.lastName, attributeObj);\n        tests[\"profile LastName\"] = profileLastName;\n         profileAddress = tv4.validate(profileInfo.address, attributeObj);\n        tests[\"profile Address\"] = profileAddress;\n         profileIdProof = tv4.validate(profileInfo.idProof, attributeObj);\n        tests[\"profile IdProof\"] = profileIdProof;\n         profileUrl = tv4.validate(profileInfo.fileUrl, attributeObj);\n        tests[\"profile FileUrl\"] = profileUrl;\n         profileEmail = tv4.validate(profileInfo.email, attributeObj);\n        tests[\"profile Email\"] = profileEmail;\n       \n        validUserProfile = tv4.validate( profileInfo, userProfileObj);\n          tests[\"valid UserProfile\"] = validUserProfile;\n          \n          \n         \n         \n          \n}\n});\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "[\n\n{\n\n  \"field\": \"firstName\",\n  \"value\": \"MTBD New old\"\n  \n}\n\n]"
		},
		{
			"id": "cba0a91a-94d0-de71-9fa2-3c81544acfba",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/reportSummary/platform/mtbd/status  ",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "ReportsummaryStatus",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493027475492,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar reportSummaryStatusObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['unknown', 'running','stopped','idle','notused'],\n properties: {\n    unknown: {\n    \n      type: 'number'\n    },\n    running:{\n        \n        type: 'number'\n    },\n   stopped:{\n       type:'number'\n   },\n  idle:{\n      type:'number'\n  },\n  notused:{\n      type:'number'\n  }\n }\n};\ndescribe('Get List of ReportSummaryStatus', function() {\n    it('Should Return List of ReportSummaryStatusInfo', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    it('Should Have a Valid List of ReportSummaryStatusInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var statusResponse = response.body[i];\n          statusResponse.should.be.an('object');\n       expect( statusResponse.should.have.property('unknown')).and.not.empty;\n       expect( statusResponse.should.have.property('running')).and.not.empty;\n        expect(statusResponse.should.have.property('stopped')).and.not.empty;\n        expect(statusResponse.should.have.property('idle')).and.not.empty;\n        expect(statusResponse.should.have.property('notused')).and.not.empty;\n       \n        \n        validStatusList = tv4.validate(statusResponse, reportSummaryStatusObj);\n          tests[\"Valid ReportSummaryStatusList\"] = validStatusList;\n          \n          \n      }\n     \n    });\n    \n    \n});\n \n \n ",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "cdcacc35-7a0a-7604-bedd-019ee93e9f59",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\nContent-Type: application/json\n",
			"url": "http://localhost:49963/api/geofence/point11/vehicles",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "PUT",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Geofence Put",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493304035056,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "[\r\n  {\r\n     \"vehicleRegNo\": \"MH 30 NL 7384\",\r\n    \"startDate\": \"2017-02-02\",\r\n    \"endDate\": \"2017-03-02\",\r\n    \"type\": \"In bound\"\r\n  }\r\n]"
		},
		{
			"id": "d158a3e1-0509-076f-1128-a8fa8d2df5b0",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\nContent-Type: application/json\n",
			"url": "http://localhost:49963/api/driverprofiles/driver    ",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Add Driver",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493028442588,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar driverProfileObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['id', 'firstName','lastName','contactNumber','address','fileUrl','email','idProofTypeId','idProofNumber','benchmarkFE','benchmarkDistance','ranking','assignedVehicles'],\n properties: {\n    id: {\n    \n      type: 'object'\n    },\n    firstName:{\n        \n        type: 'object'\n    },\n   contactNumber:{\n       type:'object'\n   },\n  address:{\n      type:'object'\n  },\n \n  idProofTypeId:{\n      type:'object'\n  },\n  idProofNumber:{\n      type:'object'\n  },\n  fileUrl:{\n       type:'object'\n   },\n  email:{\n      type:'object'\n  },\n  benchmarkFE:{\n      type:'object'\n  },\n  \n  benchmarkDistance:{\n       type:'object'\n   },\n  ranking:{\n      type:'object'\n  },\n  assignedVehicles:{\n      type:'array'\n  }\n  \n }\n};\n \nvar attributeObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['value', 'type','editable'],\n properties: {\n    value: {\n    // should be number in feature\n      type: 'string'\n    },\n    type:{\n        // should be number in feature\n        type: 'string'\n    },\n   editable:{\n       type:'boolean'\n   } \n }\n};\n\nfunction createNewContactNumber(contactNo){\n    var number = parseInt(contactNo);\n    var newContactNo = number+1;\n    \n    return newContactNo.toString();\n}\n\nvar stringArrayObj = {\n  \"items\": {\n    \"type\": \"string\"\n  }\n};\n\ndescribe('Get DriverProfile Info', function() {\n    it('Should Return DriverProfile Info', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    it('Should Have a Valid DriverProfileMessage', function() {\n          var driverInfo = response.body[0];\n          driverInfo.should.be.an('object');\n           driverInfo.should.have.property('id').and.not.empty;\n           postman.setEnvironmentVariable('driverId', driverInfo.id.value);\n           \n        driverInfo.should.have.property('firstName').and.not.empty;\n        driverInfo.should.have.property('lastName').and.not.empty;\n        driverInfo.should.have.property('contactNumber').and.not.empty;\n        postman.setEnvironmentVariable('newdriverContactNo',  createNewContactNumber(driverInfo.contactNumber.value));\n        driverInfo.should.have.property('address').and.not.empty;\n       driverInfo.should.have.property('fileUrl').and.not.empty;\n        driverInfo.should.have.property('email').and.not.empty;\n        driverInfo.should.have.property('benchmarkFE').and.not.empty;\n        driverInfo.should.have.property('benchmarkDistance').and.not.empty;\n        driverInfo.should.have.property('ranking').and.not.empty;\n        driverInfo.should.have.property('assignedVehicles');\n       \n        for(var i=0;i<response.body.length;i++){\n        var driverInfoObj = response.body[i];\n        \n        validDriveProfile = tv4.validate(driverInfoObj, driverProfileObj);\n         tests[\"valid DriverProfile\"] = validDriveProfile;\n          \n         validVehichleList = tv4.validate(driverInfo.assignedVehicles, stringArrayObj);\n          tests[\"valid VehichleList\"] = validVehichleList;\n             \n         }\n     \n     \n     });\n});",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\r\n\r\n  \"firstname\": \"Test\",\r\n  \"lastname\": \"User\",\r\n  \"contactNumber\": 8527019178,\r\n  \"address\": \"1 first floor chennai\",\r\n   \"idprooftypeid\":\"1\",\r\n   \"idproofnumber\":\"123\",\r\n   \"file\":\" \",\r\n  \"email\": \"test@123.com\",\r\n  \"benchmarkFE\": \"123\",\r\n  \"benchmarkDistance\": 123,\r\n  \"ranking\": \"1\",\r\n  \"idProof\":\"\"\r\n \r\n  \r\n}\r\n"
		},
		{
			"id": "d6394e8a-c9c7-7f07-b299-72483126a0a9",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/vehiclesSummary/AP 09 KU 9999",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar vehicleSummaryObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['vehicleRegNo', 'vehicleLastUsedOn','totalUsage','vehicleRunningHours','vehicleIdleHours'],\n  properties: {\n    vehicleRegNo: {\n      type: 'string'\n    },\n    vehicleLastUsedOn: {\n      type: 'string'\n    },\n    totalUsage: {\n        type: 'string'\n    },\n    vehicleRunningHours:{\n        type:'string'\n    },\n   vehicleIdleHours:{\n       type: 'string'\n   }\n  }\n   \n};\n\n\n\n\ndescribe('Get VehichleSummary Info', function() {\n    it('Should Return VehichleSummary Info', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid Vehichle Summary List ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var alertResponse = response.body[i];\n          alertResponse.should.be.an('object');\n        alertResponse.should.have.property('vehicleRegNo').and.not.empty;\n        alertResponse.should.have.property('vehicleLastUsedOn').and.not.empty;\n        alertResponse.should.have.property('totalUsage').and.not.empty;\n        alertResponse.should.have.property('vehicleRunningHours').and.not.empty;\n        alertResponse.should.have.property('vehicleIdleHours').and.not.empty;\n        \n        \n        validvehichleList = tv4.validate(alertResponse, vehicleSummaryObj);\n          tests[\"Valid VehichleList\"] = validvehichleList;\n          \n          \n      }\n     \n    });\n    \n    \n\n});\n      \n      \n    ",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493025367282,
			"name": "vehichlesummary",
			"description": "",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"responses": [],
			"rawModeData": "{\n  \"username\": \"kingkhan\",\n  \"password\": \"Srk@0211\",\n  \"remember_me\": true\n}"
		},
		{
			"id": "dc3b7106-0e20-2a07-1e0d-7d0396aa6bb5",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/report/platform/mtbd/vehiclemovement/usagetime/TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "usage report",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493039648251,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "e959371a-e231-443e-c88c-9de8c352397f",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/vehicleMappingWithDriver/AP 09 KU 9999",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "POST",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "Vehicle Driver Un Mapping",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493030390774,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar vehichleMappingObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['vehiclePlatform', 'vehicleModel','vehicleVariant','vehicleRegNo','status','lastupdated','lastknownlocation','priorityAlertStatus','address','speed','runningHours','driverName'],\n  properties: {\n    vehiclePlatform: {\n      type: 'string'\n    },\n    vehicleModel: {\n      type: 'string'\n    },\n    vehicleVariant: {\n        type: 'string'\n    },\n   vehicleRegNo:{\n       type: 'string'\n   }, \n   status:{\n       type:'string'\n   },\n   lastupdated: {\n      type: 'string'\n    },\n    lastknownlocation: {\n      type: 'object'\n    },\n    priorityAlertStatus: {\n        type: 'boolean'\n    },\n   address:{\n       type: 'string'\n   }, \n   speed:{\n       type:'string'\n   },\n  runningHours:{\n       type: 'string'\n   }, \n   driverName:{\n       type:'string'\n   },\n   \n  }\n};\nvar locationObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['longitude', 'latitude'],\n properties: {\n    longitude: {\n    // should be number in feature\n      type: 'number'\n    },\n    latitude:{\n        // should be number in feature\n        type: 'number'\n    }\n }\n};\n\n\ndescribe('Valid Vehicle driver mapping', function() {\n    it('Should map Driver to vehicle', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n     it('Should Have a Valid  Vehicle driver mapping Message  ', function() {\n      var mappingResponse = response.body[0];\n      mappingResponse.should.be.an('object');\n      mappingResponse.should.have.property('vehiclePlatform').and.not.empty;\n      mappingResponse.should.have.property('vehicleModel').and.not.empty;\n      mappingResponse.should.have.property('vehicleVariant').and.not.empty;\n      mappingResponse.should.have.property('vehicleRegNo').and.not.empty;\n      mappingResponse.should.have.property('status').and.not.empty;\n      mappingResponse.should.have.property('lastupdated').and.not.empty;\n      mappingResponse.should.have.property('lastknownlocation').and.not.empty;\n      mappingResponse.should.have.property('priorityAlertStatus').and.not.empty;\n      mappingResponse.should.have.property('address').and.not.empty;\n      mappingResponse.should.have.property('speed').and.not.empty;\n      mappingResponse.should.have.property('runningHours').and.not.empty;\n      mappingResponse.should.have.property('driverName');\n      \n       for(var j=0;j<response.body.length;j++){\n          var vehicleMappingList = response.body[j];\n          vehicleMappingList.should.be.an('object').and.not.empty;\n           validMappingList = tv4.validate(vehicleMappingList, vehichleMappingObj);\n          tests[\"Valid Vehicle Mapping List\"] = validMappingList;\n          var validLocationInfo = tv4.validate(vehicleMappingList.lastknownlocation, locationObj);\n             tests[\"Valid Dealers Location Info\"] = validLocationInfo;\n       }\n     });\n});",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "f330d872-c75f-c0db-67c7-6d6091090451",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963//api/vehicleAlerts?startDate=2016-01-01 00:00:00&endDate=2017-04-24 00:00:00",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "All Vehichles alerts",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493024698660,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\nvar alertObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['alertId', 'priority','alertName','dateTime','location'],\n  properties: {\n    alertId: {\n      type: 'string'\n    },\n    priority: {\n      type: 'string'\n    },\n    alertName: {\n        type: 'string'\n    },\n   dateTime:{\n       type: 'string'\n   }, \n   location:{\n       type:'object'\n   },\n  \n   \n  }\n};\n\nvar locationAlertObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['longitude', 'latitude'],\n properties: {\n    longitude: {\n    // should be number in feature\n      type: 'number'\n    },\n    latitude:{\n        // should be number in feature\n        type: 'number'\n    }\n }\n};\n\nvar allVehichleAlertObj = {\n  title: ' schema v1',\n  type: 'object',\n  required: ['vehicleRegNo', 'alerts'],\n  properties: {\n    vehicleRegNo: {\n      type: 'string'\n    },\n    alerts: {\n      type: 'array',\n   /* items: {\n         $ref: '#/simpleAlert',required:'true'\n         \n      }*/\n    \n    }\n      \n    \n  }\n};\n\n//tv4.addSchema('aSchema', aSchema);\n\ndescribe('Get All Vehichles Alert Info', function() {\n    it('Should Return All Vehichle Alerts', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n \n    it('Should Have a Valid  Vehichles Alerts ', function() {\n      var alertResponse = response.body[0];\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('vehicleRegNo').and.not.empty;\n      alertResponse.should.have.property('alerts').and.not.empty;\n      \n      for(var j=0;j<response.body.length;j++){\n          var alert = response.body[j];\n          alert.should.be.an('object').and.not.empty;\n          var validAlert = tv4.validate(alert, allVehichleAlertObj);\n          tests[\"Valid VehichleAlert\"] = validAlert;\n          var alertInfo = alert.alerts;\n          for(var i=0;i<alertInfo.length;i++){\n              var validAlertInfo = tv4.validate(alertInfo[i],alertObj);\n             tests[\"Valid Vehichle AlertInfo\"] = validAlertInfo;\n             var validLocationInfo = tv4.validate(alertInfo[i].location, locationAlertObj);\n             tests[\"Valid Vehichle LocationInfo\"] = validLocationInfo;\n             \n              \n               \n          }\n          \n      }\n\n    });\n\n});\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n  \"username\": \"kingkhan\",\n  \"password\": \"Srk@0211\",\n  \"remember_me\": true\n}"
		},
		{
			"id": "f6be00d5-1b37-6cbf-7e84-1ad6cb4160fd",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/report/platform/mtbd/vehiclemovement/speeddata/TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "Speed Data",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493039682643,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "faeb24db-53c6-3d68-6eba-b711a833e48a",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\nstartDate: 2016-01-01 00:00:00\nendDate: 2017-04-25 00:00:00\n",
			"url": "http://localhost:49963/api/geofence/ddd/vehicles/?startDate=2016-01-01 00:00:00&endDate=2017-04-25 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "Geofencebased on vehicles with date",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493038721917,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "fc1670cc-839e-00a9-d855-1b5e82528cc5",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963/api/profile",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "CurrentUserProfile",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493027143003,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\n\nvar userProfileObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['id', 'firstName','lastName','contactNumber','address','idProof','fileUrl','email'],\n properties: {\n    id: {\n    \n      type: 'object'\n    },\n    firstName:{\n        \n        type: 'object'\n    },\n    lastName:{\n        type:'object'\n    },\n   contactNumber:{\n       type:'object'\n   },\n  address:{\n      type:'object'\n  },\n  idProof:{\n      type:'object'\n  },\n  fileUrl:{\n       type:'object'\n   },\n  email:{\n      type:'object'\n  },\n  \n \n }\n};\n \nvar attributeObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['value', 'type','editable'],\n properties: {\n    value: {\n    // should be number in feature\n      type: 'string'\n    },\n    type:{\n        // should be number in feature\n        type: 'string'\n    },\n   editable:{\n       type:'boolean'\n   } \n }\n};\n\nvar stringArrayObj = {\n  \"items\": {\n    \"type\": \"string\"\n  }\n};\n\ndescribe('Get List of UserProfile', function() {\n    it('Should Return List of UserProfile', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n    \n    it('Should Have a Valid List of  UserProfileInfo ', function() {\n      for(var i=0;i<response.body.length;i++){\n          var profileInfo = response.body[i];\n           profileInfo.should.be.an('object');\n         profileInfo.should.have.property('id').and.not.empty;\n         profileInfo.should.have.property('firstName').and.not.empty;\n         profileInfo.should.have.property('lastName').and.not.empty;\n         profileInfo.should.have.property('contactNumber').and.not.empty;\n         profileInfo.should.have.property('address').and.not.empty;\n         profileInfo.should.have.property('idProof').and.not.empty;\n         profileInfo.should.have.property('fileUrl').and.not.empty;\n         profileInfo.should.have.property('email').and.not.empty;\n    \n       \n           //alert(\"id:\" +tv4.validate(driverInfo.id, attributeObj));\n         \n          profileId = tv4.validate(profileInfo.id, attributeObj);\n        tests[\"profile Id\"] = profileId;\n         profileFirstName = tv4.validate(profileInfo.firstName, attributeObj);\n        tests[\"profile FirstName\"] = profileFirstName;\n         profileLastName = tv4.validate(profileInfo.lastName, attributeObj);\n        tests[\"profile LastName\"] = profileLastName;\n         profileAddress = tv4.validate(profileInfo.address, attributeObj);\n        tests[\"profile Address\"] = profileAddress;\n         profileIdProof = tv4.validate(profileInfo.idProof, attributeObj);\n        tests[\"profile IdProof\"] = profileIdProof;\n         profileUrl = tv4.validate(profileInfo.fileUrl, attributeObj);\n        tests[\"profile FileUrl\"] = profileUrl;\n         profileEmail = tv4.validate(profileInfo.email, attributeObj);\n        tests[\"profile Email\"] = profileEmail;\n       \n        validUserProfile = tv4.validate( profileInfo, userProfileObj);\n          tests[\"valid UserProfile\"] = validUserProfile;\n          \n          \n         \n         \n          \n}\n});\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "fda0b453-45c9-914c-24bf-f9712aec8218",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6IktpbmdLaGFuIiwicm9sZSI6IkRpZ2lTZW5zZSBSb2xlcyIsImlzcyI6IkRpZ2lTZW5zZSBUZWNoIE1haGluZHJhIiwiYXVkIjoiaHR0cDovL3d3dy50ZWNobWFoaW5kcmEuY29tIiwiZXhwIjoxNDkzMDE4ODY2LCJuYmYiOjE0OTMwMTcwNjZ9.gZb3MZ8CWAp3R8omcnxIQ2LrGhwYQdDZ2xPK9q17zew\n",
			"url": "http://localhost:49963//api/vehicleAlerts/AP 09 KU 9999/?startDate=2016-01-01 00:00:00&endDate=2017-04-24 00:00:00",
			"pathVariables": {},
			"preRequestScript": "",
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": "raw",
			"name": "Single  Vehichles alerts",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493024779274,
			"version": 2,
			"responses": [],
			"tests": "// Load Postman BDD\neval(globals.postmanBDD);\neval(globals.tv4);\nvar alertObj ={\n    title: ' schema v11',\n   type: 'object',\n  required: ['alertId', 'priority','alertName','dateTime','location'],\n  properties: {\n    alertId: {\n      type: 'string'\n    },\n    priority: {\n      type: 'string'\n    },\n    alertName: {\n        type: 'string'\n    },\n   dateTime:{\n       type: 'string'\n   }, \n   location:{\n       type:'object'\n   },\n  \n   \n  }\n};\n\nvar locationAlertObj ={\n     title: ' schema v12',\n   type: 'object',\n  required: ['longitude', 'latitude'],\n properties: {\n    longitude: {\n    // should be number in feature\n      type: 'number'\n    },\n    latitude:{\n        // should be number in feature\n        type: 'number'\n    }\n }\n};\n\nvar allVehichleAlertObj = {\n  title: ' schema v1',\n  type: 'object',\n  required: ['vehicleRegNo', 'alerts'],\n  properties: {\n    vehicleRegNo: {\n      type: 'string'\n    },\n    alerts: {\n      type: 'array',\n   /* items: {\n         $ref: '#/simpleAlert',required:'true'\n         \n      }*/\n    \n    }\n      \n    \n  }\n};\n\n//tv4.addSchema('aSchema', aSchema);\n\ndescribe('Get All Vehichles Alert Info', function() {\n    it('Should Return All Vehichle Alerts', function() {\n       response.should.have.status(200);\n       response.should.be.json;\n       response.body.should.not.be.empty;\n    });\n \n    it('Should Have a Valid  Vehichles Alerts ', function() {\n      var alertResponse = response.body[0];\n      alertResponse.should.be.an('object');\n      alertResponse.should.have.property('vehicleRegNo').and.not.empty;\n      alertResponse.should.have.property('alerts').and.not.empty;\n      \n      for(var j=0;j<response.body.length;j++){\n          var alert = response.body[j];\n          alert.should.be.an('object').and.not.empty;\n          var validAlert = tv4.validate(alert, allVehichleAlertObj);\n          tests[\"Valid VehichleAlert\"] = validAlert;\n          var alertInfo = alert.alerts;\n          for(var i=0;i<alertInfo.length;i++){\n              var validAlertInfo = tv4.validate(alertInfo[i],alertObj);\n             tests[\"Valid Vehichle AlertInfo\"] = validAlertInfo;\n             var validLocationInfo = tv4.validate(alertInfo[i].location, locationAlertObj);\n             tests[\"Valid Vehichle LocationInfo\"] = validLocationInfo;\n             \n              \n               \n          }\n          \n      }\n\n    });\n\n});\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n  \"username\": \"kingkhan\",\n  \"password\": \"Srk@0211\",\n  \"remember_me\": true\n}"
		},
		{
			"id": "ff391c73-8ad2-3995-e0c5-398f262ba58d",
			"headers": "token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlxdWVfbmFtZSI6Im10YmRvd25lciIsInJvbGUiOiJEaWdpU2Vuc2UgUm9sZXMiLCJpc3MiOiJEaWdpU2Vuc2UgVGVjaCBNYWhpbmRyYSIsImF1ZCI6Imh0dHA6Ly93d3cudGVjaG1haGluZHJhLmNvbSIsImV4cCI6MTQ5MzAxODk5NiwibmJmIjoxNDkzMDE3MTk2fQ.XPne2VBDlITFT2gy-hruGr3rUjBKQsPy6xhOO11E1jQ\n",
			"url": "http://localhost:49963/api//report/platform/mtbd/delivery/vehicleusagesummary//TN 03 MM 1001/?startDate=2017-01-21 00:00:00&endDate=2017-01-29 00:00:00",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "GET",
			"collectionId": "9227c181-ea6a-6969-2480-6df93a8ccbb0",
			"data": [],
			"dataMode": null,
			"name": "/report/platform/mtbd/delivery/vehicleusagesummary/",
			"description": "",
			"descriptionFormat": "html",
			"time": 1493114994550,
			"version": 2,
			"responses": [],
			"tests": null,
			"currentHelper": "normal",
			"helperAttributes": {}
		}
	]
}